N  (use-modules (ice-9 readline)) 
N  (activate-readline)
N  (add-to-load-path "/usr/local/share/opencog/scm")
N  (add-to-load-path ".")
N  (use-modules (opencog))
N  (use-modules (opencog query))
N  (use-modules (opencog exec))

N  (test-begin "PatternMatcher-tests")

N (define (typedef type instance) (InheritanceLink (ConceptNode instance) type ))

N (define color (ConceptNode "Color") ) ; No response to check for

N (define animal (ConceptNode "Animal") ) ; No response to check for

R A color
M  (ConceptNode "Color")

R B (typedef color "Blue")  
M (InheritanceLink  
  (ConceptNode "Blue") (ConceptNode "Color"))

R C (typedef color "Green")
M  (InheritanceLink (ConceptNode "Green") (ConceptNode "Color"))
  
R D (typedef color "Red")
M (InheritanceLink (ConceptNode "Red") (ConceptNode "Color"))

R E (typedef animal "fish")
M  (InheritanceLink (ConceptNode "fish") (ConceptNode "Animal"))

R F (typedef animal "dog")
M  (InheritanceLink (ConceptNode "dog") (ConceptNode "Animal"))

R G (typedef animal "cat")
M  (InheritanceLink (ConceptNode "cat") (ConceptNode "Animal"))

N  (define colornode (GetLink (VariableNode "$color")(InheritanceLink (VariableNode "$color") (ConceptNode "Color"))))

R H (cog-satisfy colornode)
M  (stv 1.000000 1.000000)

R I (cog-satisfying-set colornode)
M  (SetLink (ConceptNode "Blue") (ConceptNode "Red") (ConceptNode "Green"))

N  (define rewrite 
   (BindLink
		
		(VariableNode "$denizen")

		
		(InheritanceLink
			(VariableNode "$denizen")
			(ConceptNode "Animal")
		)
		
		
		(InheritanceLink
			(VariableNode "$denizen")
			(ConceptNode "Pet")
		)
	 )
	)

R J (cog-bind rewrite)
M  (SetLink
	   (InheritanceLink
		  (ConceptNode "fish")
		  (ConceptNode "Pet")
	   )
	   (InheritanceLink
		  (ConceptNode "cat")
		  (ConceptNode "Pet")
	   )
	   (InheritanceLink
		  (ConceptNode "dog")
		  (ConceptNode "Pet")
	   )
	)
	
N  (define petnode
		(GetLink
			
			(TypedVariableLink
				(VariableNode "$animal")
				(TypeNode "ConceptNode")
			)
			
			(InheritanceLink
				(VariableNode "$animal")
				(ConceptNode "Pet")
			)
		)
   )
   

R K (cog-satisfying-set petnode)
M   (SetLink
	   (ConceptNode "cat")
	   (ConceptNode "dog")
	   (ConceptNode "fish")
	)

N	(define executablepetnode
		(GetLink
			
			(TypedVariableLink
				(VariableNode "$animal")
				(TypeNode "ConceptNode")
			)
			
			(InheritanceLink
				(VariableNode "$animal")
				(ConceptNode "Pet")
			)
		)
)



R L (cog-satisfying-set executablepetnode)
M	(SetLink
	   (ConceptNode "cat")
	   (ConceptNode "dog")
	   (ConceptNode "fish")
	)
	

R O (cog-execute! executablepetnode)
M	(SetLink
	   (ConceptNode "cat")
	   (ConceptNode "dog")
	   (ConceptNode "fish")
	)
	
N	(define writequery
		(PutLink

			(InheritanceLink
				(VariableNode "$x")
				(ConceptNode "PrimaryColor")
			)
					 
			(SetLink
				(ConceptNode "Red")
				(ConceptNode "Green")
				(ConceptNode "Blue")
			)
		)
	)
	
R P	(cog-execute! writequery)
M	(SetLink
	   (InheritanceLink
		  (ConceptNode "Blue")
		  (ConceptNode "PrimaryColor")
	   )
	   (InheritanceLink
		  (ConceptNode "Green")
		  (ConceptNode "PrimaryColor")
	   )
	   (InheritanceLink
		  (ConceptNode "Red")
		  (ConceptNode "PrimaryColor")
	   )
	)
	
N	(define primarycolors 
       (GetLink 

       (TypedVariableLink 
       (VariableNode "$color")
       (TypeNode "ConceptNode"))
       
       (InheritanceLink
       (VariableNode "$color")
       (ConceptNode "PrimaryColor")

    )))
	
R Q	(cog-execute! primarycolors)
M	(SetLink
	   (ConceptNode "Blue")
	   (ConceptNode "Red")
	   (ConceptNode "Green")
	)

N	(define writequery
		(PutLink
			
			(InheritanceLink
				(VariableNode "$x")
				(ConceptNode "PrimaryColor")
			)
			
			(GetLink
			
				(TypedVariableLink
					(VariableNode "$color")
					(TypeNode "ConceptNode")
				)
			
				(InheritanceLink
					(VariableNode "$color")
					(ConceptNode "Color")
				)
			)
		)
	)
	
R S	(cog-execute! writequery)
M	(SetLink
	   (InheritanceLink
		  (ConceptNode "Blue")
		  (ConceptNode "PrimaryColor")
	   )
	   (InheritanceLink
		  (ConceptNode "Green")
		  (ConceptNode "PrimaryColor")
	   )
	   (InheritanceLink
		  (ConceptNode "Red")
		  (ConceptNode "PrimaryColor")
	   )
	)
	
N	(define primarycolors
		(GetLink
			(TypedVariableLink
				(VariableNode "$color")
				(TypeNode "ConceptNode")
			)
			
			(InheritanceLink
				(VariableNode "$color")
				(ConceptNode "PrimaryColor")
			)
		)
	)
	
R T (cog-execute! primarycolors)
M	(SetLink
	   (ConceptNode "Blue")
	   (ConceptNode "Red")
	   (ConceptNode "Green")
	)
	
N	(define getcolors
		(GetLink
			
			(TypedVariableLink
				(VariableNode "$obj")
			
			
				(TypeChoice
					(TypeNode "VariableNode")
					(TypeNode "ConceptNode")
				)
			)
			
			
			(ChoiceLink
			
				(InheritanceLink 
					(VariableNode "$obj")
					(ConceptNode "Color")
				)
			
				(InheritanceLink
					(VariableNode "$obj")
					(ConceptNode "PrimaryColor")
				)
			)
		)
	)
	

R U	(cog-execute! getcolors)
M	(SetLink
	   (VariableNode "$x")
	   (VariableNode "$color")
	   (ConceptNode "Blue")
	   (ConceptNode "Red")
	   (ConceptNode "Green")
	)


N  (test-end "PatternMatcher-tests")
